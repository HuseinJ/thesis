@book{latex,
  title = {LaTeX : A Documentation Preparation System User's Guide and Reference Manual},
  publisher = {Addison-Wesley Professional},
  year = {1994},
  author = {Leslie Lamport}
}

@inproceedings{eisenreich2024,
author = {Eisenreich, Tobias and Speth, Sandro and Wagner, Stefan},
title = {From Requirements to Architecture: An AI-Based Journey to Semi-Automatically Generate Software Architectures},
year = {2024},
isbn = {9798400705632},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3643660.3643942},
doi = {10.1145/3643660.3643942},
abstract = {Designing domain models and software architectures represents a significant challenge in software development, as the resulting architectures play a vital role in fulfilling the system's quality of service. Due to time pressure, architects often model only one architecture based on their known limited domain understanding, patterns, and experience instead of thoroughly analyzing the domain and evaluating multiple candidates, selecting the best fitting. Existing approaches try to generate domain models based on requirements, but still require time-consuming manual effort to achieve good results. Therefore, in this vision paper, we propose a method to generate software architecture candidates semi-automatically based on requirements using artificial intelligence techniques. We further envision an automatic evaluation and trade-off analysis of the generated architecture candidates using, e.g., the architecture trade-off analysis method combined with large language models and quantitative analyses. To evaluate this approach, we aim to analyze the quality of the generated architecture models and the efficiency and effectiveness of our proposed process by conducting qualitative studies.},
booktitle = {Proceedings of the 1st International Workshop on Designing Software},
pages = {52–55},
numpages = {4},
keywords = {requirements, software architecture, architecture evaluation, LLM},
location = {Lisbon, Portugal},
series = {Designing '24}
}

@article{MACCORMACK2016170,
title = {Technical debt and system architecture: The impact of coupling on defect-related activity},
journal = {Journal of Systems and Software},
volume = {120},
pages = {170-182},
year = {2016},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2016.06.007},
url = {https://www.sciencedirect.com/science/article/pii/S0164121216300760},
author = {Alan MacCormack and Daniel J. Sturtevant},
keywords = {Technical debt, Software architecture, Software maintenance, Modularity, Complexity},
abstract = {Technical Debt is created when design decisions that are expedient in the short term increase the costs of maintaining and adapting this system in future. An important component of technical debt relates to decisions about system architecture. As systems grow and evolve, their architectures can degrade, increasing maintenance costs and reducing developer productivity. This raises the question if and when it might be appropriate to redesign (“refactor”) a system, to reduce what has been called “architectural debt”. Unfortunately, we lack robust data by which to evaluate the relationship between architectural design choices and system maintenance costs, and hence to predict the value that might be released through such refactoring efforts. We address this gap by analyzing the relationship between system architecture and maintenance costs for two software systems of similar size, but with very different structures; one has a “Hierarchical” design, the other has a “Core-Periphery” design. We measure the level of system coupling for the 20,000+ components in each system, and use these measures to predict maintenance efforts, or “defect-related activity.” We show that in both systems, the tightly-coupled Core or Central components cost significantly more to maintain then loosely-coupled Peripheral components. In essence, a small number of components generate a large proportion of system costs. However, we find major differences in the potential benefits available from refactoring these systems, related to their differing designs. Our results generate insight into how architectural debt can be assessed by understanding patterns of coupling among components in a system.}
}

@book{vernon2013implementing,
  title={Implementing domain-driven design},
  author={Vernon, Vaughn},
  year={2013},
  publisher={Addison-Wesley}
}

@book{evans2004domain,
  title={Domain-driven design: tackling complexity in the heart of software},
  author={Evans, Eric},
  year={2004},
  publisher={Addison-Wesley Professional}
}


@article{ddd-maintainability,
	abstract = {Software developers need to constantly work on evolving the structure and the stability of the code due to changing business needs of the product. There are various refactoring approaches in industry which promise improvements over source code composition and maintainability.},
	author = {{\"O}zkan, Ozan and Babur, {\"O}nder and van den Brand, Mark},
	date = {2023/06/15},
	date-added = {2025-05-05 16:27:38 +0200},
	date-modified = {2025-05-05 16:27:38 +0200},
	doi = {10.1007/s10664-023-10310-1},
	id = {{\"O}zkan2023},
	isbn = {1573-7616},
	journal = {Empirical Software Engineering},
	number = {4},
	pages = {94},
	title = {Refactoring with domain-driven design in an industrial context},
	url = {https://doi.org/10.1007/s10664-023-10310-1},
	volume = {28},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1007/s10664-023-10310-1}}

@online{ftapi2025,
  author = {{FTAPI Software GmbH}},
  title = {{FTAPI Secutransfer Platform}},
  year = {2025},
  url = {https://www.ftapi.com/plattform},
  urldate = {2025-05-29},
  organization = {FTAPI Software GmbH},
  type = {Company website}
}

@INPROCEEDINGS{chen2023automated,
  author={Chen, Kua and Yang, Yujing and Chen, Boqi and Hernández López, José Antonio and Mussbacher, Gunter and Varró, Dániel},
  booktitle={2023 ACM/IEEE 26th International Conference on Model Driven Engineering Languages and Systems (MODELS)}, 
  title={Automated Domain Modeling with Large Language Models: A Comparative Study}, 
  year={2023},
  volume={},
  number={},
  pages={162-172},
  keywords={Training;Knowledge engineering;Fault diagnosis;Automation;Natural languages;Data models;Software;domain modeling;large language models;few-shot learning;chain-of-thought prompting;prompt engineering},
  doi={10.1109/MODELS58315.2023.00037}}

@inproceedings{Saini2022,
author = {Saini, Rijul and Mussbacher, Gunter and Guo, Jin L. C. and Kienzle, J\"{o}rg},
title = {Machine learning-based incremental learning in interactive domain modelling},
year = {2022},
isbn = {9781450394666},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550355.3552421},
doi = {10.1145/3550355.3552421},
abstract = {In domain modelling, practitioners manually transform informal requirements written in natural language (problem descriptions) to more concise and analyzable domain models expressed with class diagrams. With automated domain modelling support using existing approaches, manual modifications may still be required in extracted domain models and problem descriptions to make them more accurate and concise. For example, educators teaching software engineering courses at universities usually use an incremental approach to build modelling exercises to restrict students in using intended modelling patterns. These modifications result in the evolution of domain modelling exercises over time. To assist practitioners in this evolution, a synergy between interactive support and automated domain modelling is required. In this paper, we propose a bot-assisted approach to allow practitioners perform domain modelling quickly and interactively. Furthermore, we provide an incremental learning strategy empowered by machine learning to improve the accuracy of the bot's suggestions and extracted domain models by analyzing practitioners' decisions over time. We evaluate the performance of our bot using test problem descriptions which shows that practitioners can expect to get useful support from the bot when applied to exercises of similar size and complexity, with precision, recall, and F2 scores over 85\%. Finally, we evaluate our incremental learning strategy where we observe a reduction in the required manual modifications by 70\% and an improvement of F2 scores of extracted domain models by 4.2\% when using our proposed approach and learning strategy together.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems},
pages = {176–186},
numpages = {11},
keywords = {natural language processing (NLP), machine learning (ML), incremental learning, evolution, domain models, decisions, bot},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

